{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"\ud83e\udde0","text":"<p>The <code>index.md</code> in the <code>/docs</code> folder is the homepage you see here.</p> <p>The folders in <code>/docs</code> appear as the main sections on the navigation bar.</p> <p>The notes appear as pages within these sections.</p> <p>The repository is here: https://github.com/Eco-programmers/brain</p>"},{"location":"Howto%20Code%20reviews/","title":"Code reviews","text":"<p>Code reviews are essential for high quality code. Also they are a great opportunity to share knowledge, all participants. Good code reviews can be lots of effort, but they take your code to the next level, not only because of the outside view and fresh ideas but also because you write just better code when you know that others will review it later. Code reviews should always go over manageable parts, i.e. individual program features. Avoid code reviews of thousands of lines of code from several program parts. This is frustrating for both the reviewer and the reviewee.</p> <p>Code reviews can be done either in writing or, especially for shorter reviews or when there is still a lot of explanation needed, directly together on the screen. This howto is specifically about written code reviews.</p> <p>Code reviews are often done within a merge request on GitHub or GitLab, where code reviews are built into the merge request. Otherwise, you must first decide how to perform the code review.</p> <p>For example, you can write your annotations directly as comments in the code. Then you should use unique markers so that the reviewee can find your comments quickly with the search function. I use, e.g., simply my initials, in C++ <code>// SH: ...</code>. Of course, it is important to stay consistent and not suddenly write <code>//SH ...</code>, otherwise comments might get lost.</p> <p>Another option is to use an external text document. I prefer Markdown here because it is effortless to insert code sections. I then divide the text document into sections: the first section contains general comments, the second section includes comments on the user interface. After that, each file I review gets its own section. Finally, I write the corresponding line number in the code before each comment. But of course, you can't add comments in the code itself because this would change the line numbers. So you have to decide on one option.</p> <p>Code reviews are not trivial and can contain some pitfalls. The perhaps most important to be aware of: it can be challenging to communicate emotion and intention online.</p> <p>It is helpful to understand that there are three perspectives to a code review: (i) of the person who wrote the code, (ii) of the reviewer, and (iii) of the team. During a code review, you should keep all three perspectives in mind, whether you are the reviewer or the reviewee. Here are some hints and ideas to consider for each of the perspectives:</p> <p>(the following part is mostly copied from guides/code-review at main \u00b7 thoughtbot/guides)</p>"},{"location":"Howto%20Code%20reviews/#everyone","title":"Everyone","text":"<ul> <li>Accept that many programming decisions are opinions. Discuss tradeoffs, which you prefer, and reach a resolution quickly.</li> <li>Ask good questions; don't make demands. (\"What do you think about naming this <code>:user_id</code>?\")</li> <li>Good questions avoid judgment and avoid assumptions about the author's perspective.</li> <li>Ask for clarification. (\"I didn't understand. Can you clarify?\")</li> <li>Avoid selective ownership of code. (\"mine\", \"not mine\", \"yours\")</li> <li>Assume everyone is intelligent and well-meaning. Avoid using terms that could be seen as referring to personal traits. (\"dumb\", \"stupid\").</li> <li>Be explicit. Remember people don't always understand your intentions online.</li> <li>Be humble. (\"I'm not sure - let's look it up.\")</li> <li>Don't use hyperbole. (\"always\", \"never\", \"endlessly\", \"nothing\")</li> <li>Don't use sarcasm.</li> <li>Keep it real. If emoji, animated gifs, or humor aren't you, don't force them. If they are, use them with aplomb.</li> <li>Talk synchronously (e.g. chat, screen-sharing, in person) if there are too many \"I didn't understand\" or \"Alternative solution:\" comments. Post a follow-up comment summarizing the discussion.</li> </ul>"},{"location":"Howto%20Code%20reviews/#having-your-code-reviewed","title":"Having Your Code Reviewed","text":"<ul> <li>Be grateful for the reviewer's suggestions. (\"Good call. I'll make that change.\")</li> <li>Be aware that it can be challenging to convey emotion and intention online</li> <li>Have only \"finished\" code reviewed. Finished means that you are not able or have no idea on how to further improve the code.</li> <li>Delete all commented code and unused before the review.  </li> <li>Comments make it easier for the reviewer to understand your code. Comments give context and explain why the code exists, they are not a description of what the code itself does. (\"It's like that because of these reasons. Would it be more clear if I rename this class/file/method/variable?\")</li> <li>Seek to understand the reviewer's perspective.</li> <li>Try to respond to every comment.</li> </ul>"},{"location":"Howto%20Code%20reviews/#reviewing-code","title":"Reviewing Code","text":"<p>Understand why the change is necessary (fixes a bug, improves the user experience, refactors the existing code). Then:</p> <ul> <li>Communicate which ideas you feel strongly about and those you don't (\"I think this is important, because ...\", \"I'd prefer it to ...,  but I think that is personal preference\").</li> <li>Identify ways to simplify the code while still solving the problem.</li> <li>If discussions turn too philosophical or academic, move the discussion offline to a regular Friday afternoon technique discussion. In the meantime, let the author make the final decision on alternative implementations.</li> <li>Offer alternative implementations, but assume the author already considered them. (\"What do you think about using ... here?\")</li> <li>Seek to understand the author's perspective.</li> </ul> <p>References: Related:</p>"},{"location":"C%2B%2B/Automated%20unit%20test%20with%20catch2/","title":"Automated unit test with catch2","text":""},{"location":"C%2B%2B/Automated%20unit%20test%20with%20catch2/#what-are-unit-tests","title":"What are unit tests?","text":"<p>Unit tests are software tests at the  lowest level, small pieces of code that have a specific functionality -- \"units\". Usually, a function in the code is such a unit. </p> <p>Organizing code in small units of a single and specific functionality has several benefits:</p> <ul> <li>it is easier to read and understand</li> <li>it is obvious what part of the data is manipulated</li> <li>it is much easier to find bugs</li> <li>units can often be re-used in other contexts</li> <li>it makes code testable</li> </ul> <p>When you can write tests for your code, you know your code has a good structure.</p>"},{"location":"C%2B%2B/Automated%20unit%20test%20with%20catch2/#structure-of-a-unit-test","title":"Structure of a unit test","text":"<p>A unit test runs a piece of code with known data and compares the output to an expected output. The test then either returns true (test passed) or false (test failed).</p> <p>A test suite runs all unit tests and gives a summary at the end which tests have failed and which have passed.</p> <p>Unit testing gives confidence to the programmer that the code actually does what it is supposed to do. Equally important, unit tests also give confidence to users and reviewers that not only your code is correct, but also your conclusions you have drawn from the results of your model simulations. The more complex your code becomes, the more critical are tests.</p>"},{"location":"C%2B%2B/Automated%20unit%20test%20with%20catch2/#debugging-and-unit-test","title":"Debugging and unit test","text":"<p>When you are about to fix a bug in your program, it's a good practise to first write a test, that would have found the bug. Then fix the bug, and you can be sure if the bug is fixed.</p>"},{"location":"C%2B%2B/Automated%20unit%20test%20with%20catch2/#catch2","title":"Catch2","text":"<p>There are many test frameworks for many programming languages, for example, GoogleTest or QTest. I like, however, catch2 the best because it is easy to understand and straightforward to use.</p>"},{"location":"C%2B%2B/Automated%20unit%20test%20with%20catch2/#catch2-and-qt-creator","title":"Catch2 and Qt Creator","text":"<p>A test suite is an independent computer program that has to be compiled and run. One possibility is therefore to start a new project in Qt Creator for the tests. I prefer to have both within the same project and use the sub-projects feature in Qt Creator. </p>"},{"location":"C%2B%2B/Automated%20unit%20test%20with%20catch2/#to-use-sub-projects","title":"To use sub-projects:","text":"<ol> <li>Create a Subdirs Project File &gt; New File or Project &gt; Other Project &gt; Subdirs Project &gt; Choose</li> <li>Add a sub-project After creating the subdirs project, you are automatically asked to add a new sub-project. Either do that or click \"cancel\". You can always right-click on the project name and add a new sub-project:</li> </ol> <p>You can also add an existing project as a sub-project. Just copy the folder with the project files (i.e. .pro, .cpp and .h) where you want them to be located and choose \"Add Existing Projects\". </p> <p>For catch2, add a sub-project: Non-Qt Project &gt; Plain C++ Application</p>"},{"location":"C%2B%2B/Automated%20unit%20test%20with%20catch2/#setup-catch2","title":"Setup catch2","text":"<p>Catch2 consists only of a single file catch.hpp. Just download it and copy the file where the other files of your test sub-project are. Don't worry about the file ending .hpp. This is just another way to name header files. In the end, both are just text files, and you are free to re-name it to catch.h. This is how it looks in my file browser:</p> <p></p> <p>Then you need to add the catch.hpp file to your Qt project. In Qt Creator, right-click on the name of the test project &gt; Add Existing Files and choose the catch.hpp file. Then open the main.cpp of your test project and replace all its contents with </p> <pre><code>// WINDOWS:\n....\n</code></pre> <pre><code>// LINUX ONLY:\n#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file\n#include \"catch.hpp\"\n\n//Exactly one source file must #define either CATCH_CONFIG_MAIN or CATCH_CONFIG_RUNNER before\n//#include-ing Catch.\n//In this file do not write any test cases!\n//In most cases that means this file will just contain two lines (the #define and the #include).\n</code></pre> <p>Catch2 generates its own main() function and we do not need to worry about it at all.</p>"},{"location":"C%2B%2B/Automated%20unit%20test%20with%20catch2/#the-first-unit-test","title":"The first unit test","text":"<p>Assume you want to write a series of tests for the CookieBox class. First, you need to add the files with the code you want to be tested to the test project (do not copy the files, just add them). In our case, we need to add cookiebox.h and cookiebox.cpp. Then you need to add a new C++ source file test-cookiebox.cpp to the test project and include catch2 and the CookieBox class, for example: <pre><code>// test-cookiebox.cpp\n\n#include \"catch.hpp\"\n#include \"../Chapter7/cookiebox.h\"\n</code></pre></p> <p>The unit tests in catch2 can be organized in test cases and sections to bundle tests that belong together. For the actual tests, catch2 uses so-called assertion macros. They are actually quite intuitive to use: <pre><code>CHECK( cookiebox.getAmountOfCookies() == Approx(1.0) );\n</code></pre> CHECK() is the macro and does what it says: it check whether the expression in the parentheses is true or false. Approx() handles the issue with floating-point comparisons by allowing for small deviances. A list of all available macros in catch2 can be found here.</p> <p>The complete test-cookiebox.cpp file may the look like so:</p> <p><pre><code>// test-cookiebox.cpp\n\n#include \"catch.hpp\"\n#include \"../Chapter7/cookiebox.h\"\n\n\nTEST_CASE( \"Test the CookieBox class\") {\n// cookie box parameters\nconst double carryingCapacity = 1.0;\nconst double growthRate = 0.05;\nconst double initialAmountOfRessource = 1.0;\nCookieBox cookiebox(growthRate,carryingCapacity, initialAmountOfRessource);\n\nSECTION(\"Test if initialization is correct\") {\nCHECK(cookiebox.getAmountOfCookies() == Approx(1.0));\n}\n\nSECTION(\"Test growth() function\") {\n// nothing here, yet\n}\n}\n</code></pre> Now you can run your first unit test. First, select the appropriate sub-project:</p> <p> Then compile &amp; run.</p> <p>References:  Related:</p>"},{"location":"Git/Git%20installation%20and%20basics/","title":"Git installation and basics","text":""},{"location":"Git/Git%20installation%20and%20basics/#where-to-get-it-and-installation","title":"Where to get it and installation","text":"<ul> <li>only the command-line version includes all features</li> </ul>"},{"location":"Git/Git%20installation%20and%20basics/#linux","title":"Linux","text":"<p>Install it via your package manager: <code>$ sudo apt install git-all</code></p>"},{"location":"Git/Git%20installation%20and%20basics/#macos","title":"macOS","text":"<p>Open a console and enter: <code>$ git --version</code> It is either installed already or, it will prompt you to install it.</p>"},{"location":"Git/Git%20installation%20and%20basics/#windows","title":"Windows","text":"<ul> <li>Video: How to install Git on Windows Download the Windows installer or the Windows Portable version from https://git-scm.com/download/win</li> </ul>"},{"location":"Git/Git%20installation%20and%20basics/#graphical-user-interfaces","title":"Graphical user interfaces","text":"<p>Have a look at: https://git-scm.com/downloads/guis/</p> <ul> <li>Looks promising, but I never used GitHub Desktop (free, commercial, macOS, Win)</li> <li>I use from time to time GitKraken (free for students, commercial, Linux, macOS, Win)</li> </ul>"},{"location":"Git/Git%20installation%20and%20basics/#getting-started","title":"Getting started","text":"<ul> <li>Video: Git basics</li> <li>Video: Keep Git branches in sync</li> </ul>"},{"location":"Git/Git%20installation%20and%20basics/#first-time-only","title":"First-time, only","text":"<p>Give Git your name and e-mail address. Both will be part of your git commits so its possible to distinguish between the commits of different contributors. <pre><code>git config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n</code></pre></p> <p>If you want to use a different text editor, e.g. gedit: <code>git config --global core.editor gedit</code> Windows example: <code>git config --global core.editor \"'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"</code></p> <p>Check ypur settings: <code>git config --list</code></p>"},{"location":"Git/Git%20installation%20and%20basics/#getting-a-git-repository","title":"Getting a Git Repository","text":"<p>(this section is copy'n'pasted from Chapter 2.1 Git Basics)</p> <p>You typically obtain a Git repository in one of two ways:</p> <ol> <li> <p>You can take a local directory that is currently not under version control, and turn it into a Git repository, or</p> </li> <li> <p>You can clone an existing Git repository from elsewhere.</p> </li> </ol> <p>In either case, you end up with a Git repository on your local machine, ready for work.</p>"},{"location":"Git/Git%20installation%20and%20basics/#initializing-a-repository-in-an-existing-directory","title":"Initializing a Repository in an Existing Directory","text":"<p>If you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project\u2019s directory. If you\u2019ve never done this, it looks a little different depending on which system you\u2019re running:</p> <p>for Linux:</p> <pre><code>$ cd /home/user/my_project\n</code></pre> <p>for macOS:</p> <pre><code>$ cd /Users/user/my_project\n</code></pre> <p>for Windows:</p> <pre><code>$ cd /c/user/my_project\n</code></pre> <p>and type:</p> <pre><code>$ git init\n</code></pre> <p>This creates a new subdirectory named <code>.git</code> that contains all of your necessary repository files\u2009\u2014\u2009a Git repository skeleton. At this point, nothing in your project is tracked yet. (See Git Internals for more information about exactly what files are contained in the <code>.git</code> directory you just created.)</p> <p>If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit. You can accomplish that with a few <code>git add</code> commands that specify the files you want to track, followed by a <code>git commit</code>:</p> <pre><code>$ git add *.c\n$ git add LICENSE\n$ git commit -m 'initial project version'\n</code></pre> <p>We\u2019ll go over what these commands do in just a minute. At this point, you have a Git repository with tracked files and an initial commit.</p>"},{"location":"Git/Git%20installation%20and%20basics/#cloning-an-existing-repository","title":"Cloning an Existing Repository","text":"<p>[...]</p> <p>You clone a repository with <code>git clone &lt;url&gt;</code>. For example, if you want to clone the Git linkable library called <code>libgit2</code>, you can do so like this:</p> <pre><code>$ git clone https://github.com/libgit2/libgit2\n</code></pre> <p>That creates a directory named <code>libgit2</code>, initializes a <code>.git</code> directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version. If you go into the new <code>libgit2</code> directory that was just created, you\u2019ll see the project files in there, ready to be worked on or used.</p> <p>If you want to clone the repository into a directory named something other than <code>libgit2</code>, you can specify the new directory name as an additional argument:</p> <pre><code>$ git clone https://github.com/libgit2/libgit2 mylibgit\n</code></pre> <p>That command does the same thing as the previous one, but the target directory is called <code>mylibgit</code>.</p> <p>Git has a number of different transfer protocols you can use. The previous example uses the <code>https://</code> protocol, but you may also see <code>git://</code> or <code>user@server:path/to/repo.git</code>, which uses the SSH transfer protocol. [...]</p> <p>(end of copy'n'pasted content)</p>"},{"location":"Git/Git%20installation%20and%20basics/#the-gitignore-file","title":"The .gitignore file","text":"<p>You want to track the relevant files, only. In particular, you want to avoid tracking automatically generated or system-specific files, like the <code>*.pro.user</code> file or the <code>build-*</code> folder in Qt projects. This is done with a simple text file directly in your repository folder (not the .git folder). The file name is <code>.gitignore</code>, with no file extension. </p> <p>Creating a <code>.gitignore</code> file is usually one of the first steps after creating a new repository. You can write the files or file patterns which should be ignored line-by-line in the .gitignore file. It is often handy to start from an existing <code>.gitignore</code> file and adapt it to your needs. There is a collection of different <code>.gitignore</code> files at GitHub github.com/github/gitignore or you can try the <code>.gitignore</code> generator at gitignore.io.</p>"},{"location":"Git/Git%20installation%20and%20basics/#using-git","title":"Using Git","text":"<p><code>git status</code> to get an overview of your repository <code>git add</code> stage a file for commit <code>git add .</code> stage all new or modified files <code>git commit</code> commit all files that are staged <code>git commit -a</code> stage and commit a single step <code>git commit file1 file2</code> just commit file1 and file2 instead of all staged files</p>"},{"location":"Git/Git%20installation%20and%20basics/#branches","title":"Branches","text":"<p><code>git branch my-branch</code>  create a new branch <code>git checkout my-branch</code> switch to that branch (git version &lt; 2.23) <code>git switch my-branch</code> switch to that branch (git version &gt;= 2.23)</p>"},{"location":"Git/Git%20installation%20and%20basics/#useful","title":"Useful","text":"<p>https://ndpsoftware.com/git-cheatsheet.html</p> <p>https://rogerdudler.github.io/git-guide/</p> <p>https://guides.github.com/introduction/git-handbook/</p> <p>http://marklodato.github.io/visual-git-guide</p> <p>https://git-scm.com/doc</p> <p>https://git-scm.com/book/en/v2</p> <p>https://www.atlassian.com/git/tutorials/advanced-overview</p> <p>https://www.atlassian.com/dam/jcr:8132028b-024f-4b6b-953e-e68fcce0c5fa/atlassian-git-cheatsheet.pdf</p> <p>https://guides.github.com/</p> <p>References:  Related: </p>"},{"location":"R/Debugging%20R%20Packages/","title":"Debugging R Packages","text":"<p>Debugging R code is is normally quite straight forward and RStudio offers useful tools. But when you have to debug R packages with compiled code it becomes more complicated. For C++ code, you might want to use an external debugger like Qt Creator with gdb, for example.</p> <p>Sometimes, especially when the bug affects the interface between R and your compiled code, R just crashes or behaves funny when using your package.  Then you need to check your package with specially compiled R variants.</p>"},{"location":"R/Debugging%20R%20Packages/#start-the-docker-container","title":"Start the Docker container","text":"<p>Winston Chang provides a very useful Docker image for debugging R memory problems which I recommend to use:</p> <pre><code>docker run -v $PWD:/src:ro -it --rm --security-opt seccomp=unconfined wch1/r-debug\n</code></pre> <p>This container provides different variants of <code>R</code> (copied from the image readme):</p> <ul> <li><code>R</code> The current release version of R.</li> <li><code>RD</code> The current development version of R (R-devel). This version is compiled without optimizations (-O0), so a debugger can be used to inspect the code as written, instead of an optimized version of the code which may be significantly different.</li> <li><code>RDvalgrind</code>: R-devel compiled with valgrind level 2 instrumentation. This should be started with RDvalgrind -d valgrind.</li> <li><code>RDsan</code>: R-devel compiled with gcc, Address Sanitizer and Undefined Behavior Sanitizer.</li> <li><code>RDcsan</code>: R-devel compiled with clang, Address Sanitizer and Undefined Behavior Sanitizer.</li> <li><code>RDstrictbarrier</code>: R-devel compiled with --enable-strict-barrier. This can be used with gctorture(TRUE), or gctorture2(1, inhibit_release=TRUE).</li> <li><code>RDthreadcheck</code>: R-devel compiled with -DTHREADCHECK, which causes it to detect if memory management functions are called from the wrong thread.</li> </ul> <p>Note that you'll have to install packages separately for each build of R.</p>"},{"location":"R/Debugging%20R%20Packages/#install-dependencies","title":"Install dependencies","text":"<p>Once, you started the Docker container, you might need to install system dependencies like so:</p> <pre><code>add-apt-repository ppa:ubuntugis/ubuntugis-unstable\napt update &amp;&amp; apt upgrade -y &amp;&amp; apt install -y libgfortran-10-dev libudunits2-dev libgdal-dev libgeos-dev libproj-dev </code></pre> <p>You can install the R package and its dependencies either within each R variants or via the command line for all R variants, here is an example:</p> <pre><code># !!!NO SPACES!!!\ninstall=\"install.packages(c(\\\"testthat\\\",\\\"devtools\\\",\\\"roxygen2\\\",\\\"remotes\\\",\\\"covr\\\",\\\"Rcpp\\\"))\"\nremotes_install=\"remotes::install_github(\\\"git@github.com:ropensci/NLMR.git\\\",dependencies=TRUE)\"\n</code></pre> <p>Repeat for each variant of <code>R</code> you are going to use, i.e. for all R variants just copy and paste the following block (not line-by-line) to the command line in the Docker container:</p> <pre><code>R -e $install &amp;&amp; R -e $remotes_install &amp;&amp;\nRD -e $install &amp;&amp; RD -e $remotes_install &amp;&amp;\nRDvalgrind -e $install &amp;&amp; RDvalgrind -e $remotes_install &amp;&amp;\nRDsan -e $install &amp;&amp; RDsan -e $remotes_install &amp;&amp;\nRDcsan -e $install &amp;&amp; RDcsan -e $remotes_install &amp;&amp;\nRDstrictbarrier -e $install &amp;&amp; RDstrictbarrier -e $remotes_install &amp;&amp;\nRDthreadcheck -e $install &amp;&amp; RDthreadcheck -e $remotes_install\n</code></pre>"},{"location":"R/Debugging%20R%20Packages/#run-tests","title":"Run tests","text":"<p>Again, you can start interactive R sessions for each R variant or run the tests from the command line. Here is an example for <code>NLMR</code>, adjust to your needs:</p> <pre><code>mkdir -p NLMR_checks &amp;&amp; cd NLMR_checks &amp;&amp;\nmkdir -p R &amp;&amp; cd R &amp;&amp;\nR -e 'tools::testInstalledPackage(\"NLMR\")' &amp;&amp;\nmkdir -p ../RD &amp;&amp; cd ../RD &amp;&amp;\nRD -e 'tools::testInstalledPackage(\"NLMR\")' &amp;&amp;\nmkdir -p ../RDvalgrind &amp;&amp; cd ../RDvalgrind &amp;&amp;\nRDvalgrind -e 'tools::testInstalledPackage(\"NLMR\")' &amp;&amp;\n# RDsan probably fails due to https://github.com/google/sanitizers/issues/856\n# mkdir -p ../RDsan &amp;&amp; cd ../RDsan &amp;&amp;\n# RDsan -e 'tools::testInstalledPackage(\"NLMR\")' &amp;&amp;\nmkdir -p ../RDcsan &amp;&amp; cd ../RDcsan &amp;&amp;\nRDcsan -e 'tools::testInstalledPackage(\"NLMR\")' &amp;&amp;\nmkdir -p ../RDstrictbarrier &amp;&amp; cd ../RDstrictbarrier &amp;&amp;\nRDstrictbarrier -e 'tools::testInstalledPackage(\"NLMR\")' &amp;&amp;\nmkdir -p ../RDthreadcheck &amp;&amp; cd ../RDthreadcheck &amp;&amp;\nRDthreadcheck -e 'tools::testInstalledPackage(\"NLMR\")' &amp;&amp;\ncd ../..\n</code></pre> <p>To run functions without debug output, in this example <code>NLMR::nlm_fbm(50, 100, fract_dim = 1.2)</code>, you can redirect the output and errors to files:</p> <pre><code>mkdir -p NLMR_checks &amp;&amp; cd NLMR_checks &amp;&amp;\nmkdir -p R &amp;&amp; cd R &amp;&amp;\nR -e 'NLMR::nlm_fbm(50, 100, fract_dim = 1.2)' 1&gt; out.txt 2&gt; err.txt &amp;&amp;\nmkdir -p ../RD &amp;&amp; cd ../RD &amp;&amp;\nRD -e 'NLMR::nlm_fbm(50, 100, fract_dim = 1.2)' 1&gt; out.txt 2&gt; err.txt &amp;&amp;\nmkdir -p ../RDvalgrind &amp;&amp; cd ../RDvalgrind &amp;&amp;\nRDvalgrind -e 'NLMR::nlm_fbm(50, 100, fract_dim = 1.2)' 1&gt; out.txt 2&gt; err.txt &amp;&amp;\n# RDsan probably fails due to https://github.com/google/sanitizers/issues/856\n# mkdir -p ../RDsan &amp;&amp; cd ../RDsan &amp;&amp;\n# RDsan -e 'NLMR::nlm_fbm(50, 100, fract_dim = 1.2)' 1&gt; out.txt 2&gt; err.txt &amp;&amp;\nmkdir -p ../RDcsan &amp;&amp; cd ../RDcsan &amp;&amp;\nRDcsan -e 'NLMR::nlm_fbm(50, 100, fract_dim = 1.2)' 1&gt; out.txt 2&gt; err.txt &amp;&amp;\nmkdir -p ../RDstrictbarrier &amp;&amp; cd ../RDstrictbarrier &amp;&amp;\nRDstrictbarrier -e 'NLMR::nlm_fbm(50, 100, fract_dim = 1.2)' 1&gt; out.txt 2&gt; err.txt &amp;&amp;\nmkdir -p ../RDthreadcheck &amp;&amp; cd ../RDthreadcheck &amp;&amp;\nRDthreadcheck -e 'NLMR::nlm_fbm(50, 100, fract_dim = 1.2)' 1&gt; out.txt 2&gt; err.txt &amp;&amp;\ncd ../..\n</code></pre> <p><code>1&gt;</code> is the redirect for normal outputs, <code>2&gt;</code> redirects errors.</p>"},{"location":"R/Debugging%20R%20Packages/#valgrind","title":"Valgrind","text":"<p>Valgrind is a powerful tool for memory debugging.</p> <pre><code>mkdir -p NLMR_checks &amp;&amp; cd NLMR_checks &amp;&amp;\nRDvalgrind -d valgrind -e 'devtools::test(\"NLMR\", reporter = testthat::LocationReporter)' 1&gt; valgrind_results.txt 2&gt; valgrind_errors.txt &amp;&amp;\ncd ..\n</code></pre> <p>or for a single function:</p> <pre><code>mkdir -p NLMR_checks &amp;&amp; cd NLMR_checks &amp;&amp;\nRDvalgrind -d valgrind -e 'NLMR::nlm_fbm(50, 100, fract_dim = 1.2)' 1&gt; valgrind_fmb_results.txt 2&gt; valgrind_fbm_errors.txt &amp;&amp;\ncd ..\n</code></pre>"},{"location":"R/Debugging%20R%20Packages/#save-results","title":"Save results","text":"<p>The results are all saved in the folder <code>NLMR_checks</code> in the examples used above. So let's first zip it:</p> <pre><code>zip -r NLMR_checks.zip NLMR_checks\n</code></pre> <p>Then, open a new terminal on your computer (do leave the terminal with Docker running) and copy the zip file to your local machine with <code>docker cp</code>:</p> <pre><code>docker cp &lt;Container ID&gt;:&lt;Path of file inside the container&gt; &lt;Path in the local machine&gt;\n</code></pre> <p>For example:</p> <pre><code>docker ps # to get the Container ID 67bb4dabd1bd\ndocker cp 67bb4dabd1bd:/root/NLMR_checks.zip ./\n</code></pre> <p>The zip file will be owned by root, because you need to be root to run <code>docker</code>. To change the ownership to your current user, run:</p> <pre><code>sudo chown $USER:$USER NLMR_checks.zip </code></pre> <p>References: https://reside-ic.github.io/blog/debugging-and-fixing-crans-additional-checks-errors/ Related:</p>"},{"location":"R/How%20to%20setup%20a%20project%20%28Research%20compendium%29/","title":"!! Work in progress !! #WIP","text":""},{"location":"R/How%20to%20setup%20a%20project%20%28Research%20compendium%29/#motivation","title":"Motivation","text":"<ul> <li>Reproducability -  for you and others</li> <li>easier to understand and navigate -&gt; standardized structure</li> <li>standardized structure</li> </ul>"},{"location":"R/How%20to%20setup%20a%20project%20%28Research%20compendium%29/#contents","title":"Contents","text":"<ul> <li>code, raw data, results, analysis, metadata, (software) dependencies, documentation and workflow</li> </ul>"},{"location":"R/How%20to%20setup%20a%20project%20%28Research%20compendium%29/#basic-structure-for-an-r-project","title":"Basic structure for an R project","text":"<p><code>bash yourProject \u251c\u2500\u2500 raw_data      # folder contains all raw data (read-only) - modified data is in the outputs/ folder \u2502   \u2514\u2500\u2500 README    # text file which describes what is to be stored in that folder \u251c\u2500\u2500 DESCRIPTION   # file contains project metadata (author, date, dependencies, etc.) \u251c\u2500\u2500 figures       # folder contains all the figures created during the workflow \u2502   \u2514\u2500\u2500 README \u251c\u2500\u2500 inst \u2502   \u2514\u2500\u2500 CITATION  # text file with bibentry on how to cite this project \u251c\u2500\u2500 LICENSE.md    # license file. No license implicitly means no-one is allowed to re-use your code \u251c\u2500\u2500 make.R        # file contains the complete workflow (i.e. sources all scripts from the rscripts folder in the correct order) \u251c\u2500\u2500 man           # folder contains documentation of the functions in the R folder \u251c\u2500\u2500 yourProject.Rproj # file with the RStudio project information \u251c\u2500\u2500 NAMESPACE     # file  \u251c\u2500\u2500 outputs       # folder contains all results created by user (including modified raw data) \u2502   \u2514\u2500\u2500 README \u251c\u2500\u2500 paper         # contains manuscript materials (biblio, templates, Rmd, etc.) \u2502   \u2514\u2500\u2500 README \u251c\u2500\u2500 R             # R functions coded for the analysis \u251c\u2500\u2500 README.md     # Project \"homepage\" \u251c\u2500\u2500 rscripts      # folder contains all analyses of the project (i.e. the steps of the workflow) \u2502   \u2514\u2500\u2500 README \u251c\u2500\u2500 src           # folder for other code (e.g. C++, Python, Fortran, ...)   \u2514\u2500\u2500 tests         # unit tests for the R-functions     \u251c\u2500\u2500 testthat     \u2502   \u2514\u2500\u2500 aUnitTest.R     \u2514\u2500\u2500 testthat.R</code></p> <p>This structure is recognized by RStudio as an R-Package. This allows to <code>build</code> and even <code>install</code> your project! Also you don't need to setup this structure by hand. Either simply create an R-Package, with R Studio or <code>usethis::create_package()</code></p> <p>Note: use \"raw_data\" if you do not want to include the data to the project as you cannot exclude 'data' from the package </p>"},{"location":"R/How%20to%20setup%20a%20project%20%28Research%20compendium%29/#recommended","title":"Recommended","text":""},{"location":"R/How%20to%20setup%20a%20project%20%28Research%20compendium%29/#include-your-compute-environment","title":"Include your compute environment","text":"<ul> <li>use the renv R package to include all R packages with the respective versions in the compendium</li> <li>or put everything in a container (e.g. Docker)</li> </ul>"},{"location":"R/How%20to%20setup%20a%20project%20%28Research%20compendium%29/#include-and-manage-your-workflow","title":"Include and manage your workflow","text":"<ul> <li>use the targets R package</li> </ul>"},{"location":"R/How%20to%20setup%20a%20project%20%28Research%20compendium%29/#hexstickers-and-status-badges","title":"Hexstickers and Status badges","text":"<p>\u2502   \u2502   \u251c\u2500\u2500 hexsticker.png # always nice to have for R packages ;-) \u2502   \u2502   \u2514\u2500\u2500 lifecycle # is used to show the state of this project, important for others to decided wether or not to trust and use your work \u2502   \u2502       \u251c\u2500\u2500 lifecycle-deprecated.svg \u2502   \u2502       \u251c\u2500\u2500 lifecycle-experimental.svg \u2502   \u2502       \u251c\u2500\u2500 lifecycle-stable.svg \u2502   \u2502       \u2514\u2500\u2500 lifecycle-superseded.svg</p> <p>References:  Related: </p>"},{"location":"R/Install%20and%20setup%20R%2C%20RStudio%2C%20Rcpp/","title":"Install and setup R, RStudio, Rcpp","text":""},{"location":"R/Install%20and%20setup%20R%2C%20RStudio%2C%20Rcpp/#ubuntu","title":"Ubuntu","text":"<p>The <code>R</code> version in the Ubuntu repositories is usually outdated. I therefore recommend to use CRAN's Ubuntu repository:</p> <pre><code>sudo apt install --no-install-recommends software-properties-common dirmngr\n\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\n</code></pre> <p>Then install R, Rcpp and RInside:</p> <pre><code>sudo apt-get update\nsudo apt-get install r-base r-base-dev r-cran-rinside r-cran-rcpp\n</code></pre> <p>To install RStudio download the *.deb file from https://rstudio.com/products/rstudio/download/#download and install it.</p>"},{"location":"R/Install%20and%20setup%20R%2C%20RStudio%2C%20Rcpp/#windows","title":"Windows","text":""},{"location":"R/Install%20and%20setup%20R%2C%20RStudio%2C%20Rcpp/#1-install-r","title":"1. Install R","text":"<ul> <li>Download R from https://cran.r-project.org/bin/windows/base/</li> <li>Install R in a directory with no fancy characters in its path, e.g. <code>C:\\R\\R-4.1.2</code> is safe</li> <li>Accept all defaults</li> </ul>"},{"location":"R/Install%20and%20setup%20R%2C%20RStudio%2C%20Rcpp/#2-install-rtools","title":"2. Install RTools","text":"<p>Rtools provides a compiler and some helpers to compile code for R in Windows. Download Rtools from here: https://cran.r-project.org/bin/windows/Rtools/ and select the appropriate Rtools version (4.0 with R 4.x.x)</p> <p>Install Rtools in a directory with no fancy characters in its path, e.g. <code>C:\\R\\Rtools</code> is safe. To install, right click on the <code>Rtools40.exe</code> and select \u201cRun as administrator\u201d. During the installation make sure to select \"Add Rtools to PATH\". Otherwise, accept all defaults for everything else.</p>"},{"location":"R/Install%20and%20setup%20R%2C%20RStudio%2C%20Rcpp/#3-install-rstudio","title":"3. Install RStudio","text":"<ul> <li>Download RStudio from https://rstudio.com/products/rstudio/download/#download</li> <li>Install R in a directory with no fancy characters in its path, e.g. <code>C:\\R\\RStudio</code> is safe</li> </ul>"},{"location":"R/Install%20and%20setup%20R%2C%20RStudio%2C%20Rcpp/#4-install-rcpp-rinside","title":"4. Install Rcpp &amp; RInside","text":"<ul> <li>in RStudio: <code>install.packages(c(\"RInside\", \"Rcpp\"))</code></li> </ul> <p>References: https://cran.r-project.org/bin/linux/ubuntu/ Related: </p>"},{"location":"R/Rcpp%20Links/","title":"Rcpp Links","text":"<ul> <li>Rcpp4everyone by Masaki E. Tsuda is a fantastic reference and a good start for learning Rcpp</li> <li>Rcpp presentation slides by Florian Priv\u00e9.</li> <li>Rcpp example gallary Very helpful!</li> <li>R refernence byDirk Eddelbuettel and more publications</li> <li>My Rcpp Hacky Hour talk</li> </ul> <p>References: Related:</p>"},{"location":"R/Run%20scripts%20in%20RStudio%20as%20background%20jobs/","title":"Run R-scripts in RStudio as background jobs","text":""},{"location":"R/Run%20scripts%20in%20RStudio%20as%20background%20jobs/#why","title":"Why?","text":"<p>When you run a script in RStudio, it will be started in the same process as RStudio itself. For scripts that take a while to finish, sometimes days, this means your RStudio will become unresponsive and you might not be able to login to your RStudio server until your script finished. The solution to this is to run your script in a different process, as a background job.</p>"},{"location":"R/Run%20scripts%20in%20RStudio%20as%20background%20jobs/#how","title":"How?","text":"<ol> <li> <p>Save your script in a file. It must be source-able, i.e. run without any manual interference. <pre><code># Example R script\nlibrary(readr)\nlibrary(myPackage)\n\nfieldParameter &lt;- read_csv(\"raw_data/fieldParameter.csv\")\nlandscapes &lt;- read_csv(\"raw_data/landscapes.csv\")\n\nrun_simulations(model_parameter = fieldParameter, landscapes = landscapes, max_runtime = 1000, seed = 123)\n</code></pre></p> </li> <li> <p>Click at the top-right of the scripting-area in RStudio on <code>Source</code> -&gt; <code>Source as Background Job</code>. To see this option, you need to click on the small triangular arrow, not the button itself. </p> </li> <li> <p>In the options, I suggest not to run the job with a copy of the global environment because this might mess up your results. In <code>Copy job results</code> I usually either use the default (Don't copy) when I store the results on disk or to results object in the global environment to avoid any confusion with my current data objects. </p> </li> <li> <p>You can monitor (or stop) your background jobs in a tab next to the R Console. Stopping parallelized jobs might take some time. </p> </li> </ol> <p>References:  Related: </p>"},{"location":"R/Set%20PATH%20environment%20variable%20for%20R%20and%20Rtools%20in%20/","title":"Set PATH environment variable for R and RTools in Windows","text":"<ul> <li>In System Properties &gt; choose the Advanced tab &gt; Environment Variables: </li> <li> <p>In the lower part (System variables), double-click on the entry Path: </p> </li> <li> <p>Check if the bin-Folders of both, your R-installation and your Rtools are in your PATH (just hit New and add the path if they're missing). Make sure, that Rtools\\bin comes before R\\bin as shown below: </p> </li> </ul>"},{"location":"R/Setup%20Qt%20Creator%20to%20develop%20Rcpp/","title":"[[Rcpp]] and [[Qt Creator]]","text":"","tags":[]},{"location":"R/Setup%20Qt%20Creator%20to%20develop%20Rcpp/#motivation","title":"Motivation","text":"<ul> <li>RStudio is a great IDE for R, but its C++ support is limited</li> <li>Debugging C++ code is difficult with RStudio</li> <li>Qt Ceator is a great IDE for C++ and works very well for debugging</li> </ul>","tags":[]},{"location":"R/Setup%20Qt%20Creator%20to%20develop%20Rcpp/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install and setup R, RStudio, Rcpp</li> <li>Set PATH environment variable for R and Rtools in </li> <li>[[Install Qt Creator]]</li> <li>Create an Setup an R-Package with Rcpp in RStudio</li> </ul>","tags":[]},{"location":"R/Setup%20Qt%20Creator%20to%20develop%20Rcpp/#add-the-rtools-compiler-to-qt-creator-windows-only","title":"Add the Rtools compiler to Qt Creator (Windows only)","text":"<ul> <li>be careful not to mix up the 32-bit versions with the 64-bit versions</li> <li>in Tools &gt; Options &gt; Kits in the Compilers tab select a MinGW C++ compiler and Clone it:</li> </ul> <ul> <li>change the name of the cloned compiler to, e.g. Rtools MinGW C++ and change the Compiler path the g++.exe of your Rtools installation:</li> </ul> <ul> <li>Just as with the C++ compiler, also clone the MinGW C compiler, rename the cloned compiler and change the Compiler path to the gcc.exe of your Rtools installation</li> <li>Select the Kits tab and clone a default Kit. Clone a 64-bit kit if you want to use a 64-bit compiler or a 32-bit kit to use with a 32-bit compiler. Rename it and select the newly added C and C++ compilers from your Rtools installation:</li> </ul> <ul> <li>Be aware, you cannot use the Qt libraries with the Rtools compiler</li> </ul>","tags":[]},{"location":"R/Setup%20Qt%20Creator%20to%20develop%20Rcpp/#create-a-c-project-in-qt-creator","title":"Create a C++ Project in Qt Creator","text":"<ul> <li>New Project &gt; Non-Qt Project &gt; Plain C++ Application</li> </ul> <ul> <li>Give the project a meaningful name. I usually use packagename-rcpp-dev and create it in the R-Project's folder structure:</li> </ul> <ul> <li>Windows: choose a Kit with the Rtools compiler &amp; next, next, finish :-)</li> </ul>","tags":[]},{"location":"R/Setup%20Qt%20Creator%20to%20develop%20Rcpp/#add-the-rcpp-and-rinstide-libraries","title":"Add the Rcpp and RInstide libraries","text":"<ul> <li>in your *.pro file, add:</li> </ul> <pre><code>## Template from the example at http://dirk.eddelbuettel.com/blog/2011/03/25/#rinside_and_qt\n\n## comment this out if you need a different version of R,\n## and set set R_HOME accordingly as an environment variable\nR_HOME = $$system(R RHOME)\n\n## include headers and libraries for R\nRCPPFLAGS =         $$system($$R_HOME/bin/R CMD config --cppflags)\nRLDFLAGS =      $$system($$R_HOME/bin/R CMD config --ldflags)\nRBLAS =         $$system($$R_HOME/bin/R CMD config BLAS_LIBS)\nRLAPACK =       $$system($$R_HOME/bin/R CMD config LAPACK_LIBS)\n\n## if you need to set an rpath to R itself, also uncomment\nRRPATH =        -Wl,-rpath,$$R_HOME/lib\n\n## include headers and libraries for Rcpp interface classes\n## note that RCPPLIBS will be empty with Rcpp (&gt;= 0.11.0) and can be omitted\nRCPPINCL =      $$system($$R_HOME/bin/Rscript -e \\\"Rcpp:::CxxFlags\\(\\)\\\")\nRCPPLIBS =      $$system($$R_HOME/bin/Rscript -e \\\"Rcpp:::LdFlags\\(\\)\\\")\n\n## include headers and libraries for RInside embedding classes\nRINSIDEINCL =       $$system($$R_HOME/bin/Rscript -e \\\"RInside:::CxxFlags\\(\\)\\\")\nRINSIDELIBS =       $$system($$R_HOME/bin/Rscript -e \\\"RInside:::LdFlags\\(\\)\\\")\n\n## compiler etc settings used in default make rules\nQMAKE_CXXFLAGS +=   $$RCPPWARNING $$RCPPFLAGS $$RCPPINCL $$RINSIDEINCL\nQMAKE_LIBS +=           $$RLDFLAGS $$RBLAS $$RLAPACK $$RINSIDELIBS $$RCPPLIBS\n</code></pre>","tags":[]},{"location":"R/Setup%20Qt%20Creator%20to%20develop%20Rcpp/#use-r-rcpp-and-c-seamlessly","title":"Use R, Rcpp and C++ seamlessly","text":"<ul> <li>Add your Rcpp files just like any other file to your project in Qt Creator, i.e. right-click on the project name in the project structure &gt; Add existing files and add all C++ files you need:</li> </ul> <ul> <li>you can embed an R session like this:</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;RInside.h&gt;\n\nusing namespace std;\nusing namespace Rcpp;\n\nint main()\n{\nRInside R; // this is an R session, yay!\nR.parseEvalQ(\"i &lt;- 5 + 5\");\nint x = R[\"i\"];\ncout &lt;&lt; \"Hello \" &lt;&lt; x &lt;&lt; endl;\n\nIntegerVector vec = R.parseEval(\"seq(0, 100, 7)\");\n\ncout &lt;&lt; \"\\nHello vector:\"&lt;&lt; endl;\nfor (unsigned i = 0; i &lt; vec.size(); i++) {\ncout &lt;&lt; vec[i] &lt;&lt; \" \";\n}\ncout &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <ul> <li>Debugging works as usual, with the exception, that you can't see the values that are stored in Rcpp objects. That's because Rcpp objects are just wrappers to C-pointers (called SEXP) that point to memory locations of R-objects. But fortunately, it is often trivial to convert Rcpp objects to C++ objects:</li> </ul>","tags":[]},{"location":"R/Setup%20Qt%20Creator%20to%20develop%20Rcpp/#further-reading-on-rcpp","title":"Further reading on Rcpp","text":"<p>Rcpp Links</p> <p>References: Related:</p>","tags":[]},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/","title":"Setup an R-Package with Rcpp in RStudio","text":""},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#prerequisites","title":"Prerequisites","text":"<p>Windows</p> <ul> <li>Install and setup R, RStudio, Rcpp</li> </ul> <p><code>install.packages(c(\"Rcpp\", \"devtools\"))</code></p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#0-file-new-project-package-using-rcpp","title":"0.  File -&gt; New Project -&gt; ... -&gt; Package using Rcpp","text":""},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#1-create-rpackager-file","title":"1. Create R/package.R file","text":"<ul> <li>create R/package.R file</li> <li>run</li> </ul> <p><code>usethis::use_rcpp()</code> and add the lines suggested usethis to your R/package.R file</p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#2-git-setup","title":"2. Git Setup","text":"<p><code>usethis::use_git()</code></p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#3-open-and-edit-description-file-to-your-needs","title":"3. Open and edit DESCRIPTION file to your needs","text":""},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#4-add-a-license","title":"4. Add a license","text":"<p><code>usethis::use_gpl3_license(name = \"Sebastian Hanss\")</code></p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#5-add-a-readmemd","title":"5. add a Readme.md","text":"<p><code>usethis::use_readme_md()</code></p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#6-setup-unit-tests-in-r","title":"6. setup unit tests in R","text":"<p><code>usethis::use_testthat()</code></p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#7-setup-roxygen-for-namespce-and-documentaion","title":"7. setup roxygen for NAMESPCE and documentaion","text":"<ul> <li>overwrite your NAMESPACE file:</li> </ul> <p><code>usethis::use_namespace()</code></p> <ul> <li>allow Markdown in your documentation</li> </ul> <p><code>usethis::use_roxygen_md()</code></p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#8-commit-all-changes-to-your-local-repository-now","title":"8. Commit all changes to your local repository now","text":"<ul> <li>in the Terminal:</li> </ul> <p><code>git add .</code> <code>git commit -m \"initial commit\"</code></p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#9-create-a-github-repo","title":"9. Create a GitHub repo","text":""},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#9a-if-you-dont-have-a-github-access-token-yet-get-one","title":"9a. if you don't have a GitHub access token, yet get one:","text":"<p><code>usethis::browse_github_pat()</code> <code>usethis::edit_r_environ() # Make sure '.Renviron' ends with a newline!</code></p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#9b-create-a-github-repo","title":"9b. create a GitHub repo:","text":"<p><code>usethis::use_github(private = TRUE)</code></p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#enable-roxygen-update-on-build","title":"Enable Roxygen update on build","text":"<ul> <li>Build tab -&gt; More -&gt; Configure Build Tools:</li> </ul> <ul> <li>Check Generate documentation with Roxygen:</li> </ul> <p> I also check roxygenize on \"Build and Restart\" for convenience.</p>"},{"location":"R/Setup%20an%20R-Package%20with%20Rcpp%20in%20RStudio/#sources-and-further-reading","title":"Sources and further reading","text":"<ul> <li>http://r-pkgs.had.co.nz/</li> <li>https://www.r-bloggers.com/rcpp-and-roxygen2/</li> <li>https://laderast.github.io/2019/02/12/package-building-description-namespace/</li> </ul> <p>References: YoMos Workshop 2020 Related:</p>"},{"location":"R/Packages/renv%20R%20package/","title":"renv R package","text":"<p><code>renv::init(bare = TRUE)</code> <code>renv::status()</code> see which packages need to be installed Update the lockfile using the packages in the DESCRIPTION file <code>renv::snapshot(type = \"explicit\")</code> (default add all installed packages to the lockfile)</p> <p>References:  Related: </p>"},{"location":"R/Packages/targets%20R%20package/","title":"targets R package","text":""},{"location":"R/Packages/targets%20R%20package/#-successor-to-drake","title":"- successor to <code>drake</code>","text":"<p>References: ropensci/targets: Function-oriented Make-like declarative workflows for R Related: [[R Workflow]]</p>"}]}